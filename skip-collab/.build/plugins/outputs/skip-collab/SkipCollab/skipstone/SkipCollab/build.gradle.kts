// build.gradle.kts generated by Skip for SkipCollab
android {
    buildFeatures {
        compose = true
        buildConfig = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.1"
    }
    compileSdk = 34
    defaultConfig {
        minSdk = 29
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        applicationId = System.getenv("PRODUCT_BUNDLE_IDENTIFIER") ?: "skip.collab"
        manifestPlaceholders["PRODUCT_NAME"] = System.getenv("PRODUCT_NAME") ?: "SkipCollab"
        manifestPlaceholders["PRODUCT_BUNDLE_IDENTIFIER"] = System.getenv("PRODUCT_BUNDLE_IDENTIFIER") ?: "com.ganeshrajugalla"
        manifestPlaceholders["MARKETING_VERSION"] = System.getenv("MARKETING_VERSION") ?: "0.0.1"
        manifestPlaceholders["CURRENT_PROJECT_VERSION"] = System.getenv("CURRENT_PROJECT_VERSION") ?: "1"
        manifestPlaceholders["IPHONEOS_DEPLOYMENT_TARGET"] = System.getenv("IPHONEOS_DEPLOYMENT_TARGET") ?: "16.0"
        manifestPlaceholders["MACOSX_DEPLOYMENT_TARGET"] = System.getenv("MACOSX_DEPLOYMENT_TARGET") ?: "13.0"
        manifestPlaceholders["ANDROID_PACKAGE_NAME"] = System.getenv("ANDROID_PACKAGE_NAME") ?: "skip.collab"
        manifestPlaceholders["SKIP_BUILD_APK"] = System.getenv("SKIP_BUILD_APK") ?: "YES"
        manifestPlaceholders["ASSETCATALOG_COMPILER_APPICON_NAME"] = System.getenv("ASSETCATALOG_COMPILER_APPICON_NAME") ?: "AppIcon"
        manifestPlaceholders["ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME"] = System.getenv("ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME") ?: "AccentColor"
        manifestPlaceholders["GENERATE_INFOPLIST_FILE"] = System.getenv("GENERATE_INFOPLIST_FILE") ?: "YES"
        manifestPlaceholders["CODE_SIGNING_REQUIRED"] = System.getenv("CODE_SIGNING_REQUIRED") ?: "NO"
        manifestPlaceholders["CODE_SIGN_STYLE"] = System.getenv("CODE_SIGN_STYLE") ?: "Automatic"
        manifestPlaceholders["CODE_SIGN_ENTITLEMENTS"] = System.getenv("CODE_SIGN_ENTITLEMENTS") ?: "Sources/SkipCollab/Skip/Capabilities.entitlements"
        applicationId = manifestPlaceholders["PRODUCT_BUNDLE_IDENTIFIER"]?.toString()
        versionCode = (manifestPlaceholders["CURRENT_PROJECT_VERSION"]?.toString())?.toInt()
        versionName = manifestPlaceholders["MARKETING_VERSION"]?.toString()
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    testOptions {
        unitTests {
            isIncludeAndroidResources = true
        }
    }
    namespace = "skip.collab"
    buildTypes {
        release {
            signingConfig = signingConfigs.findByName("release")
            isMinifyEnabled = true
            isShrinkResources = true
            isDebuggable = false
            proguardFiles(getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro")
        }
    }
}

dependencies {
    testImplementation("org.json:json:20180813")
    testImplementation("org.jetbrains.kotlin:kotlin-test")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3")
    androidTestImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3")
    testImplementation("org.robolectric:robolectric:4.10.3")
    androidTestImplementation("androidx.test:runner:1.5.2")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
    androidTestImplementation("org.jetbrains.kotlin:kotlin-test-junit")
    testImplementation("androidx.test:core:1.5.0")
    androidTestImplementation("androidx.test:core:1.5.0")
    testImplementation("androidx.test.ext:junit:1.1.5")
    androidTestImplementation("androidx.test.ext:junit:1.1.5")
    implementation(project(":SkipUI"))
    implementation(project(":SkipFoundation"))
    implementation(project(":SkipLib"))
    testImplementation(project(":SkipUnit"))
    androidTestImplementation(project(":SkipUnit"))
    implementation(project(":SkipModel"))
}

plugins {
    kotlin("android") version "1.9.0"
    id("com.android.application") version "8.1.0"
}

kotlin {
    jvmToolchain(17)
}

tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>() {
    kotlinOptions {
        suppressWarnings = true
    }
}

tasks.withType<Test>().configureEach {
    systemProperties.put("robolectric.logging", "stdout")
    systemProperties.put("robolectric.graphicsMode", "NATIVE")
    testLogging {
        this.showStandardStreams = true
    }
}
